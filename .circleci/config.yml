version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy_environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend:
        type: string
      frontend:
        type: string
      bucket_id:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<< parameters.bucket_id >>" --recursive
            aws cloudformation delete-stack --stack-name << parameters.backend >>
            aws cloudformation delete-stack --stack-name << parameters.frontend >>
          #  aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  rollback-migration:
    description: Rollback the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Rollback migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/5zdVt1bPJ7whGt32GaGJ7f/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
               
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend analyzer
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
             
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: backend analyzer
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: instal tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-frontend 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy_environments:
          frontend: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          bucket_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  # Configure infrastructure
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            ["56:1f:47:e1:c2:ba:51:bd:05:07:2d:4f:87:e2:ca:33"]
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      
      # Here's where you will add some code to rollback on failure
      - destroy_environments:
          frontend: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          bucket_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # Run migration
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl https://kvdb.io/5zdVt1bPJ7whGt32GaGJ7f/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'

            fi
            
      - destroy-environment:    
          frontend: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"                      
          backend: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"                        
          bucket_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - rollback-migration:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]